// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: world.proto

#include "world.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace overworld {
PROTOBUF_CONSTEXPR Island::Island(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IslandDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IslandDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IslandDefaultTypeInternal() {}
  union {
    Island _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IslandDefaultTypeInternal _Island_default_instance_;
PROTOBUF_CONSTEXPR World::World(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.islands_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WorldDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorldDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorldDefaultTypeInternal() {}
  union {
    World _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorldDefaultTypeInternal _World_default_instance_;
}  // namespace overworld
static ::_pb::Metadata file_level_metadata_world_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_world_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_world_2eproto = nullptr;

const uint32_t TableStruct_world_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::overworld::Island, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::overworld::Island, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::overworld::Island, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::overworld::Island, _impl_.type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::overworld::World, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::overworld::World, _impl_.islands_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::overworld::Island)},
  { 9, -1, -1, sizeof(::overworld::World)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::overworld::_Island_default_instance_._instance,
  &::overworld::_World_default_instance_._instance,
};

const char descriptor_table_protodef_world_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013world.proto\022\toverworld\",\n\006Island\022\t\n\001x\030"
  "\001 \001(\005\022\t\n\001y\030\002 \001(\005\022\014\n\004type\030\003 \001(\005\"+\n\005World\022"
  "\"\n\007islands\030\001 \003(\0132\021.overworld.Islandb\006pro"
  "to3"
  ;
static ::_pbi::once_flag descriptor_table_world_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_world_2eproto = {
    false, false, 123, descriptor_table_protodef_world_2eproto,
    "world.proto",
    &descriptor_table_world_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_world_2eproto::offsets,
    file_level_metadata_world_2eproto, file_level_enum_descriptors_world_2eproto,
    file_level_service_descriptors_world_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_world_2eproto_getter() {
  return &descriptor_table_world_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_world_2eproto(&descriptor_table_world_2eproto);
namespace overworld {

// ===================================================================

class Island::_Internal {
 public:
};

Island::Island(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:overworld.Island)
}
Island::Island(const Island& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Island* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:overworld.Island)
}

inline void Island::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Island::~Island() {
  // @@protoc_insertion_point(destructor:overworld.Island)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Island::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Island::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Island::Clear() {
// @@protoc_insertion_point(message_clear_start:overworld.Island)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Island::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Island::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:overworld.Island)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  // int32 type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:overworld.Island)
  return target;
}

size_t Island::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:overworld.Island)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  // int32 type = 3;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Island::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Island::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Island::GetClassData() const { return &_class_data_; }


void Island::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Island*>(&to_msg);
  auto& from = static_cast<const Island&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:overworld.Island)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Island::CopyFrom(const Island& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:overworld.Island)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Island::IsInitialized() const {
  return true;
}

void Island::InternalSwap(Island* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Island, _impl_.type_)
      + sizeof(Island::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(Island, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Island::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_world_2eproto_getter, &descriptor_table_world_2eproto_once,
      file_level_metadata_world_2eproto[0]);
}

// ===================================================================

class World::_Internal {
 public:
};

World::World(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:overworld.World)
}
World::World(const World& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  World* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.islands_){from._impl_.islands_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:overworld.World)
}

inline void World::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.islands_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

World::~World() {
  // @@protoc_insertion_point(destructor:overworld.World)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void World::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.islands_.~RepeatedPtrField();
}

void World::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void World::Clear() {
// @@protoc_insertion_point(message_clear_start:overworld.World)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.islands_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* World::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .overworld.Island islands = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_islands(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* World::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:overworld.World)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .overworld.Island islands = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_islands_size()); i < n; i++) {
    const auto& repfield = this->_internal_islands(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:overworld.World)
  return target;
}

size_t World::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:overworld.World)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .overworld.Island islands = 1;
  total_size += 1UL * this->_internal_islands_size();
  for (const auto& msg : this->_impl_.islands_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData World::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    World::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*World::GetClassData() const { return &_class_data_; }


void World::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<World*>(&to_msg);
  auto& from = static_cast<const World&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:overworld.World)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.islands_.MergeFrom(from._impl_.islands_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void World::CopyFrom(const World& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:overworld.World)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool World::IsInitialized() const {
  return true;
}

void World::InternalSwap(World* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.islands_.InternalSwap(&other->_impl_.islands_);
}

::PROTOBUF_NAMESPACE_ID::Metadata World::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_world_2eproto_getter, &descriptor_table_world_2eproto_once,
      file_level_metadata_world_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace overworld
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::overworld::Island*
Arena::CreateMaybeMessage< ::overworld::Island >(Arena* arena) {
  return Arena::CreateMessageInternal< ::overworld::Island >(arena);
}
template<> PROTOBUF_NOINLINE ::overworld::World*
Arena::CreateMaybeMessage< ::overworld::World >(Arena* arena) {
  return Arena::CreateMessageInternal< ::overworld::World >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
